/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DexMexPricePredictionInterface extends ethers.utils.Interface {
  functions: {
    "MAX_TREASURY_FEE()": FunctionFragment;
    "adminAddress()": FunctionFragment;
    "betBear(uint256)": FunctionFragment;
    "betBull(uint256)": FunctionFragment;
    "bufferSeconds()": FunctionFragment;
    "claim(uint256[])": FunctionFragment;
    "claimTreasury()": FunctionFragment;
    "claimable(uint256,address)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "executeRound()": FunctionFragment;
    "genesisLockOnce()": FunctionFragment;
    "genesisLockRound()": FunctionFragment;
    "genesisStartOnce()": FunctionFragment;
    "genesisStartRound()": FunctionFragment;
    "getUserRounds(address,uint256,uint256)": FunctionFragment;
    "getUserRoundsLength(address)": FunctionFragment;
    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "intervalSeconds()": FunctionFragment;
    "ledger(uint256,address)": FunctionFragment;
    "minBetAmount()": FunctionFragment;
    "operatorAddress()": FunctionFragment;
    "oracle()": FunctionFragment;
    "oracleLatestRoundId()": FunctionFragment;
    "oracleUpdateAllowance()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "recoverToken(address,uint256)": FunctionFragment;
    "refundable(uint256,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rounds(uint256)": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setBufferAndIntervalSeconds(uint256,uint256)": FunctionFragment;
    "setMinBetAmount(uint256)": FunctionFragment;
    "setOperator(address)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setOracleUpdateAllowance(uint256)": FunctionFragment;
    "setTreasuryFee(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasuryAmount()": FunctionFragment;
    "treasuryFee()": FunctionFragment;
    "unpause()": FunctionFragment;
    "userRounds(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "MAX_TREASURY_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "adminAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "betBear",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "betBull",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bufferSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisLockOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisLockRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisStartOnce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "genesisStartRound",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRounds",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserRoundsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "intervalSeconds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ledger",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "minBetAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "operatorAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "oracleLatestRoundId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleUpdateAllowance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "refundable",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setBufferAndIntervalSeconds",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinBetAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOperator", values: [string]): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOracleUpdateAllowance",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRounds",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "MAX_TREASURY_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "betBear", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "betBull", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bufferSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisLockOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisLockRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisStartOnce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "genesisStartRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserRoundsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "intervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ledger", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "operatorAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "oracleLatestRoundId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refundable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBufferAndIntervalSeconds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinBetAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOracleUpdateAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "userRounds", data: BytesLike): Result;

  events: {
    "BetBear(address,uint256,uint256)": EventFragment;
    "BetBull(address,uint256,uint256)": EventFragment;
    "Claim(address,uint256,uint256)": EventFragment;
    "EndRound(uint256,uint256,int256)": EventFragment;
    "LockRound(uint256,uint256,int256)": EventFragment;
    "NewAdminAddress(address)": EventFragment;
    "NewBufferAndIntervalSeconds(uint256,uint256)": EventFragment;
    "NewMinBetAmount(uint256,uint256)": EventFragment;
    "NewOperatorAddress(address)": EventFragment;
    "NewOracle(address)": EventFragment;
    "NewOracleUpdateAllowance(uint256)": EventFragment;
    "NewTreasuryFee(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Pause(uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardsCalculated(uint256,uint256,uint256,uint256)": EventFragment;
    "StartRound(uint256)": EventFragment;
    "TokenRecovery(address,uint256)": EventFragment;
    "TreasuryClaim(uint256)": EventFragment;
    "Unpause(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BetBear"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BetBull"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EndRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewAdminAddress"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "NewBufferAndIntervalSeconds"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMinBetAmount"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOperatorAddress"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewOracleUpdateAllowance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewTreasuryFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Pause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsCalculated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartRound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenRecovery"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryClaim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpause"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class DexMexPricePrediction extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DexMexPricePredictionInterface;

  functions: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_TREASURY_FEE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    adminAddress(overrides?: CallOverrides): Promise<[string]>;

    "adminAddress()"(overrides?: CallOverrides): Promise<[string]>;

    betBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "betBear(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    betBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "betBull(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    bufferSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "bufferSeconds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(uint256[])"(
      epochs: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimTreasury(overrides?: Overrides): Promise<ContractTransaction>;

    "claimTreasury()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "claimable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    currentEpoch(overrides?: CallOverrides): Promise<[BigNumber]>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeRound(overrides?: Overrides): Promise<ContractTransaction>;

    "executeRound()"(overrides?: Overrides): Promise<ContractTransaction>;

    genesisLockOnce(overrides?: CallOverrides): Promise<[boolean]>;

    "genesisLockOnce()"(overrides?: CallOverrides): Promise<[boolean]>;

    genesisLockRound(overrides?: Overrides): Promise<ContractTransaction>;

    "genesisLockRound()"(overrides?: Overrides): Promise<ContractTransaction>;

    genesisStartOnce(overrides?: CallOverrides): Promise<[boolean]>;

    "genesisStartOnce()"(overrides?: CallOverrides): Promise<[boolean]>;

    genesisStartRound(overrides?: Overrides): Promise<ContractTransaction>;

    "genesisStartRound()"(overrides?: Overrides): Promise<ContractTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    "getUserRounds(address,uint256,uint256)"(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getUserRoundsLength(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initialize(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<[BigNumber]>;

    "intervalSeconds()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    "ledger(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minBetAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    operatorAddress(overrides?: CallOverrides): Promise<[string]>;

    "operatorAddress()"(overrides?: CallOverrides): Promise<[string]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    "oracle()"(overrides?: CallOverrides): Promise<[string]>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oracleLatestRoundId()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "oracleUpdateAllowance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "recoverToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "refundable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        lockOracleId: BigNumber;
        closeOracleId: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    "rounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        lockOracleId: BigNumber;
        closeOracleId: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setBufferAndIntervalSeconds(uint256,uint256)"(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setMinBetAmount(uint256)"(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOperator(address)"(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setOracleUpdateAllowance(uint256)"(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setTreasuryFee(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTreasuryFee(uint256)"(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasuryAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "treasuryFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "userRounds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_TREASURY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

  adminAddress(overrides?: CallOverrides): Promise<string>;

  "adminAddress()"(overrides?: CallOverrides): Promise<string>;

  betBear(
    epoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "betBear(uint256)"(
    epoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  betBull(
    epoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "betBull(uint256)"(
    epoch: BigNumberish,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  "bufferSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

  claim(
    epochs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(uint256[])"(
    epochs: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimTreasury(overrides?: Overrides): Promise<ContractTransaction>;

  "claimTreasury()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "claimable(uint256,address)"(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

  "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

  executeRound(overrides?: Overrides): Promise<ContractTransaction>;

  "executeRound()"(overrides?: Overrides): Promise<ContractTransaction>;

  genesisLockOnce(overrides?: CallOverrides): Promise<boolean>;

  "genesisLockOnce()"(overrides?: CallOverrides): Promise<boolean>;

  genesisLockRound(overrides?: Overrides): Promise<ContractTransaction>;

  "genesisLockRound()"(overrides?: Overrides): Promise<ContractTransaction>;

  genesisStartOnce(overrides?: CallOverrides): Promise<boolean>;

  "genesisStartOnce()"(overrides?: CallOverrides): Promise<boolean>;

  genesisStartRound(overrides?: Overrides): Promise<ContractTransaction>;

  "genesisStartRound()"(overrides?: Overrides): Promise<ContractTransaction>;

  getUserRounds(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      })[],
      BigNumber
    ]
  >;

  "getUserRounds(address,uint256,uint256)"(
    user: string,
    cursor: BigNumberish,
    size: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber[],
      ([number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      })[],
      BigNumber
    ]
  >;

  getUserRoundsLength(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getUserRoundsLength(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initialize(
    _oracleAddress: string,
    _adminAddress: string,
    _operatorAddress: string,
    _intervalSeconds: BigNumberish,
    _bufferSeconds: BigNumberish,
    _minBetAmount: BigNumberish,
    _oracleUpdateAllowance: BigNumberish,
    _treasuryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
    _oracleAddress: string,
    _adminAddress: string,
    _operatorAddress: string,
    _intervalSeconds: BigNumberish,
    _bufferSeconds: BigNumberish,
    _minBetAmount: BigNumberish,
    _oracleUpdateAllowance: BigNumberish,
    _treasuryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

  "intervalSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

  ledger(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  "ledger(uint256,address)"(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, boolean] & {
      position: number;
      amount: BigNumber;
      claimed: boolean;
    }
  >;

  minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minBetAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  operatorAddress(overrides?: CallOverrides): Promise<string>;

  "operatorAddress()"(overrides?: CallOverrides): Promise<string>;

  oracle(overrides?: CallOverrides): Promise<string>;

  "oracle()"(overrides?: CallOverrides): Promise<string>;

  oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

  "oracleLatestRoundId()"(overrides?: CallOverrides): Promise<BigNumber>;

  oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

  "oracleUpdateAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  recoverToken(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "recoverToken(address,uint256)"(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  refundable(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "refundable(uint256,address)"(
    epoch: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      epoch: BigNumber;
      startTimestamp: BigNumber;
      lockTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      lockPrice: BigNumber;
      closePrice: BigNumber;
      lockOracleId: BigNumber;
      closeOracleId: BigNumber;
      totalAmount: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      oracleCalled: boolean;
    }
  >;

  "rounds(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      epoch: BigNumber;
      startTimestamp: BigNumber;
      lockTimestamp: BigNumber;
      closeTimestamp: BigNumber;
      lockPrice: BigNumber;
      closePrice: BigNumber;
      lockOracleId: BigNumber;
      closeOracleId: BigNumber;
      totalAmount: BigNumber;
      bullAmount: BigNumber;
      bearAmount: BigNumber;
      rewardBaseCalAmount: BigNumber;
      rewardAmount: BigNumber;
      oracleCalled: boolean;
    }
  >;

  setAdmin(
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setAdmin(address)"(
    _adminAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setBufferAndIntervalSeconds(
    _bufferSeconds: BigNumberish,
    _intervalSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setBufferAndIntervalSeconds(uint256,uint256)"(
    _bufferSeconds: BigNumberish,
    _intervalSeconds: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setMinBetAmount(
    _minBetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setMinBetAmount(uint256)"(
    _minBetAmount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOperator(
    _operatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOperator(address)"(
    _operatorAddress: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracle(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracle(address)"(
    _oracle: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setOracleUpdateAllowance(
    _oracleUpdateAllowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setOracleUpdateAllowance(uint256)"(
    _oracleUpdateAllowance: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setTreasuryFee(
    _treasuryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTreasuryFee(uint256)"(
    _treasuryFee: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "treasuryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  "treasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  userRounds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "userRounds(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TREASURY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<string>;

    "adminAddress()"(overrides?: CallOverrides): Promise<string>;

    betBear(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "betBear(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    betBull(epoch: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "betBull(uint256)"(
      epoch: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    "bufferSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(epochs: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "claim(uint256[])"(
      epochs: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimTreasury(overrides?: CallOverrides): Promise<void>;

    "claimTreasury()"(overrides?: CallOverrides): Promise<void>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "claimable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeRound(overrides?: CallOverrides): Promise<void>;

    "executeRound()"(overrides?: CallOverrides): Promise<void>;

    genesisLockOnce(overrides?: CallOverrides): Promise<boolean>;

    "genesisLockOnce()"(overrides?: CallOverrides): Promise<boolean>;

    genesisLockRound(overrides?: CallOverrides): Promise<void>;

    "genesisLockRound()"(overrides?: CallOverrides): Promise<void>;

    genesisStartOnce(overrides?: CallOverrides): Promise<boolean>;

    "genesisStartOnce()"(overrides?: CallOverrides): Promise<boolean>;

    genesisStartRound(overrides?: CallOverrides): Promise<void>;

    "genesisStartRound()"(overrides?: CallOverrides): Promise<void>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    "getUserRounds(address,uint256,uint256)"(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber[],
        ([number, BigNumber, boolean] & {
          position: number;
          amount: BigNumber;
          claimed: boolean;
        })[],
        BigNumber
      ]
    >;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRoundsLength(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    "intervalSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    "ledger(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, boolean] & {
        position: number;
        amount: BigNumber;
        claimed: boolean;
      }
    >;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minBetAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<string>;

    "operatorAddress()"(overrides?: CallOverrides): Promise<string>;

    oracle(overrides?: CallOverrides): Promise<string>;

    "oracle()"(overrides?: CallOverrides): Promise<string>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleLatestRoundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleUpdateAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "refundable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        lockOracleId: BigNumber;
        closeOracleId: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    "rounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        epoch: BigNumber;
        startTimestamp: BigNumber;
        lockTimestamp: BigNumber;
        closeTimestamp: BigNumber;
        lockPrice: BigNumber;
        closePrice: BigNumber;
        lockOracleId: BigNumber;
        closeOracleId: BigNumber;
        totalAmount: BigNumber;
        bullAmount: BigNumber;
        bearAmount: BigNumber;
        rewardBaseCalAmount: BigNumber;
        rewardAmount: BigNumber;
        oracleCalled: boolean;
      }
    >;

    setAdmin(_adminAddress: string, overrides?: CallOverrides): Promise<void>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setBufferAndIntervalSeconds(uint256,uint256)"(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinBetAmount(uint256)"(
      _minBetAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOperator(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOperator(address)"(
      _operatorAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(_oracle: string, overrides?: CallOverrides): Promise<void>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleUpdateAllowance(uint256)"(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryFee(
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTreasuryFee(uint256)"(
      _treasuryFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRounds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    BetBear(
      sender: string | null,
      epoch: BigNumberish | null,
      amount: null
    ): EventFilter;

    BetBull(
      sender: string | null,
      epoch: BigNumberish | null,
      amount: null
    ): EventFilter;

    Claim(
      sender: string | null,
      epoch: BigNumberish | null,
      amount: null
    ): EventFilter;

    EndRound(
      epoch: BigNumberish | null,
      roundId: BigNumberish | null,
      price: null
    ): EventFilter;

    LockRound(
      epoch: BigNumberish | null,
      roundId: BigNumberish | null,
      price: null
    ): EventFilter;

    NewAdminAddress(admin: null): EventFilter;

    NewBufferAndIntervalSeconds(
      bufferSeconds: null,
      intervalSeconds: null
    ): EventFilter;

    NewMinBetAmount(
      epoch: BigNumberish | null,
      minBetAmount: null
    ): EventFilter;

    NewOperatorAddress(operator: null): EventFilter;

    NewOracle(oracle: null): EventFilter;

    NewOracleUpdateAllowance(oracleUpdateAllowance: null): EventFilter;

    NewTreasuryFee(epoch: BigNumberish | null, treasuryFee: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    Pause(epoch: BigNumberish | null): EventFilter;

    Paused(account: null): EventFilter;

    RewardsCalculated(
      epoch: BigNumberish | null,
      rewardBaseCalAmount: null,
      rewardAmount: null,
      treasuryAmount: null
    ): EventFilter;

    StartRound(epoch: BigNumberish | null): EventFilter;

    TokenRecovery(token: string | null, amount: null): EventFilter;

    TreasuryClaim(amount: null): EventFilter;

    Unpause(epoch: BigNumberish | null): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_TREASURY_FEE()"(overrides?: CallOverrides): Promise<BigNumber>;

    adminAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "adminAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    betBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "betBear(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    betBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "betBull(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    bufferSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    "bufferSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

    claim(epochs: BigNumberish[], overrides?: Overrides): Promise<BigNumber>;

    "claim(uint256[])"(
      epochs: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimTreasury(overrides?: Overrides): Promise<BigNumber>;

    "claimTreasury()"(overrides?: Overrides): Promise<BigNumber>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<BigNumber>;

    executeRound(overrides?: Overrides): Promise<BigNumber>;

    "executeRound()"(overrides?: Overrides): Promise<BigNumber>;

    genesisLockOnce(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisLockOnce()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisLockRound(overrides?: Overrides): Promise<BigNumber>;

    "genesisLockRound()"(overrides?: Overrides): Promise<BigNumber>;

    genesisStartOnce(overrides?: CallOverrides): Promise<BigNumber>;

    "genesisStartOnce()"(overrides?: CallOverrides): Promise<BigNumber>;

    genesisStartRound(overrides?: Overrides): Promise<BigNumber>;

    "genesisStartRound()"(overrides?: Overrides): Promise<BigNumber>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRounds(address,uint256,uint256)"(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUserRoundsLength(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    intervalSeconds(overrides?: CallOverrides): Promise<BigNumber>;

    "intervalSeconds()"(overrides?: CallOverrides): Promise<BigNumber>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ledger(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minBetAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minBetAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    operatorAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "operatorAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    "oracle()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleLatestRoundId(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleLatestRoundId()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleUpdateAllowance(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleUpdateAllowance()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "recoverToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "refundable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setAdmin(_adminAddress: string, overrides?: Overrides): Promise<BigNumber>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setBufferAndIntervalSeconds(uint256,uint256)"(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setMinBetAmount(uint256)"(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOperator(address)"(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracle(_oracle: string, overrides?: Overrides): Promise<BigNumber>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setOracleUpdateAllowance(uint256)"(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    setTreasuryFee(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTreasuryFee(uint256)"(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    treasuryAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    "treasuryFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "userRounds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_TREASURY_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_TREASURY_FEE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "adminAddress()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    betBear(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "betBear(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    betBull(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "betBull(uint256)"(
      epoch: BigNumberish,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    bufferSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bufferSeconds()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claim(
      epochs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(uint256[])"(
      epochs: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimTreasury(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimTreasury()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "currentEpoch()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRound(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeRound()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    genesisLockOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisLockOnce()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisLockRound(overrides?: Overrides): Promise<PopulatedTransaction>;

    "genesisLockRound()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    genesisStartOnce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "genesisStartOnce()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    genesisStartRound(overrides?: Overrides): Promise<PopulatedTransaction>;

    "genesisStartRound()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    getUserRounds(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRounds(address,uint256,uint256)"(
      user: string,
      cursor: BigNumberish,
      size: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserRoundsLength(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUserRoundsLength(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256,uint256,uint256,uint256,uint256)"(
      _oracleAddress: string,
      _adminAddress: string,
      _operatorAddress: string,
      _intervalSeconds: BigNumberish,
      _bufferSeconds: BigNumberish,
      _minBetAmount: BigNumberish,
      _oracleUpdateAllowance: BigNumberish,
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    intervalSeconds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "intervalSeconds()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ledger(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ledger(uint256,address)"(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minBetAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minBetAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    operatorAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "operatorAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracle()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    oracleLatestRoundId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracleLatestRoundId()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleUpdateAllowance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "oracleUpdateAllowance()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverToken(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "recoverToken(address,uint256)"(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    refundable(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "refundable(uint256,address)"(
      epoch: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rounds(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setAdmin(address)"(
      _adminAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setBufferAndIntervalSeconds(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setBufferAndIntervalSeconds(uint256,uint256)"(
      _bufferSeconds: BigNumberish,
      _intervalSeconds: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setMinBetAmount(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setMinBetAmount(uint256)"(
      _minBetAmount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOperator(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOperator(address)"(
      _operatorAddress: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracle(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracle(address)"(
      _oracle: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setOracleUpdateAllowance(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setOracleUpdateAllowance(uint256)"(
      _oracleUpdateAllowance: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    setTreasuryFee(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTreasuryFee(uint256)"(
      _treasuryFee: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    treasuryAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasuryFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    userRounds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "userRounds(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
